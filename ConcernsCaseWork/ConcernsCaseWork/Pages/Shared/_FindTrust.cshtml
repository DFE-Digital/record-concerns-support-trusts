@using ConcernsCaseWork.Service.Configuration;
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Options;
@using NetEscapades.AspNetCore.SecurityHeaders
@model ConcernsCaseWork.Models.FindTrustModel

@inject IOptions<TrustSearchOptions> trustSearchOptions

@{
	if (String.IsNullOrWhiteSpace(Model.Nonce))
	{
		throw new InvalidOperationException("Nonce not provided by parent page");
	}
}

<div tabindex="-1" role="group" id="errorSummary" class="govuk-error-summary moj-hidden" aria-labelledby="error-summary-title" data-module="error-summary"></div>

<div class="govuk-form-group">
	<fieldset class="govuk-fieldset" data-required data-error="Search cannot be blank" >

		<legend class="govusk-fieldset__legend govuk-fieldset__legend--l">
			<h2 class="govuk-fieldset__heading govuk-heading-m">
				Find Trust
			</h2>
		</legend>

        <label class="govuk-hint" for="search" id="outgoing-trust-search-query-hint">
            <text>Enter at least @trustSearchOptions.Value.MinCharsRequiredToSeach characters of a trust name, trust reference number (UKPRN) or companies house number.</text>
		</label>
        <div id="tooManyResultsWarning" style="display:none;">
            <p class="govuk-heading-s govuk-!-margin-top-3" aria-label="There are a large number of search results. Try a more specific search term">There are a large number of search results. Try a more specific search term.</p>
        </div>

	</fieldset>
</div>

<div id="autocomplete-container" class="govuk-!-margin-top-3"></div>
<div class="ccms-loader govuk-!-display-none"></div>
<ul class="autocomplete__menu autocomplete__menu--inline autocomplete__menu--hidden" id="trustsearch__listbox" role="listbox">
	<li class="autocomplete__option autocomplete__option--no-results">No results found.</li>
</ul>
<input type="hidden" id="selectedTrustUkprn" name="selectedTrustUkprn" required />

<script type="application/javascript" nonce="@Model.Nonce">
    $(document).ready(function () {

         $(document).ajaxStart(function() {
            showLoader();
        })
         $(document).ajaxStop(function() {
            hideLoader();
        })


        const autocompleteContainer = document.getElementById("autocomplete-container");
        const trustSearchDelay = @trustSearchOptions.Value.MilliSecondPauseBeforeSeach;
        let trustSearchResults = undefined;
        let selectedTrustUkprn = undefined;
        let xhr = undefined;
        let timeout = undefined;

	    function generateNonce(length) {
	        var text = "";
	        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	        for(var i = 0; i < length; i++) {
	            text += possible.charAt(Math.floor(Math.random() * possible.length));
	        }
	        return text;
	    }

        function cancelSearch() {
            clearTimeout(timeout);
	        if (xhr !== undefined) {
	            xhr.abort();
	        }
            xhr = undefined;
            trustSearchResults = undefined;
            selectedTrustUkprn = undefined;
        }

        function searchForTrusts(queryStr, populateResults) {

            let showWarningWhenTooManyResults = @trustSearchOptions.Value.ShowWarningWhenTooManySearchResults;
            cancelSearch();

            var requestIfNotCancelled = () => {
                $("#tooManyResultsWarning").hide();
	            // use trust page for searching
                xhr = $.get("/trust/TrustsSearchResult", { searchQuery: queryStr, nonce:generateNonce(20) })
	                .done(function (response) {

                        console.log(JSON.stringify(response));

	                    let nonce = response.nonce;
	                    let trusts = response.data;

	                    if (trusts !== undefined) {
	                        trustSearchResults = trusts;
	                        populateResults(trusts.map(x => x.displayName));

                            console.log('total matches on api = ' + response.totalMatchesFromApi);
                            console.log('isMoreDataOnServer = ' + response.isMoreDataOnServer);
                            console.log(JSON.stringify(trusts));
                            if (response.isMoreDataOnServer && showWarningWhenTooManyResults === true) {
                                $("#tooManyResultsWarning").show();
                            }
	                    }
	                    else {
	                        trustSearchResults = undefined;
	                        populateResults();
	                    }
	                })
	                .always(function() {
	                    xhr = undefined;
	                });
            };

            timeout = setTimeout(requestIfNotCancelled, trustSearchDelay);
        }

        accessibleAutocomplete({
            element: autocompleteContainer,
            id: "search",
            name: "trustSearch",
            source: searchForTrusts,
            confirmOnBlur: false,
            minLength: @trustSearchOptions.Value.MinCharsRequiredToSeach,
            showNoOptonsFound: true,
            onConfirm: (selected) => {
                selectedTrustUkprn = trustSearchResults === undefined ? undefined : trustSearchResults.find(trust => trust.displayName === selected).ukPrn;
                $('#selectedTrustUkprn').val(selectedTrustUkprn);
            }
        });
    });

</script>