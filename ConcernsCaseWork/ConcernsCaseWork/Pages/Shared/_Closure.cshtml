@*Disabled until close for monitoring is defined. Check with Richard Machen*@
@page
@using NetEscapades.AspNetCore.SecurityHeaders

@{
	var nonce = HttpContext.GetNonce();
}

<div class="govuk-form-group govuk-!-margin-top-9">
	<fieldset class="govuk-fieldset">

		<legend class="govuk-fieldset__legend govuk-fieldset__legend--s">
			Do you need to close this case for monitoring?
		</legend>

		<div class="govuk-radios govuk-radios--conditional" data-module="govuk-radios">

			<div class="govuk-radios__item">
				<input class="govuk-radios__input" data-aria-controls="conditional-monitoring-yes" id="monitoring" name="monitoring" type="radio" value="yes">
				<label class="govuk-label govuk-radios__label" for="monitoring">
					Yes
				</label>
			</div>

			<div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-monitoring-yes">
				<div class="govuk-form-group">
					<fieldset class="govuk-fieldset" role="group" aria-describedby="dtr-hint">

						<legend class="govuk-fieldset__legend govuk-!-font-weight-bold">
							Date to review
						</legend>

						<div id="dtr-hint" class="govuk-hint">
							@{
								var today = DateTime.Today;
								var tomorrow = today.AddDays(1);
							}
							For example, @tomorrow.Day @tomorrow.Month @tomorrow.Year
						</div>

						<div class="govuk-date-input" id="dtr">
							<div class="govuk-date-input__item">
								<div class="govuk-form-group">
									<label class="govuk-label govuk-date-input__label" for="dtr-day">
										Day
									</label>
									<input class="govuk-input govuk-date-input__input govuk-input--width-2" id="dtr-day"
									       name="dtr-day" type="text" maxlength="2" inputmode="numeric">
								</div>
							</div>
							<div class="govuk-date-input__item">
								<div class="govuk-form-group">
									<label class="govuk-label govuk-date-input__label" for="dtr-month">
										Month
									</label>
									<input class="govuk-input govuk-date-input__input govuk-input--width-2" id="dtr-month"
									       name="dtr-month" type="text" maxlength="2" inputmode="numeric">
								</div>
							</div>
							<div class="govuk-date-input__item">
								<div class="govuk-form-group">
									<label class="govuk-label govuk-date-input__label" for="dtr-year">
										Year
									</label>
									<input class="govuk-input govuk-date-input__input govuk-input--width-4" id="dtr-year"
									       name="dtr-year" type="text" maxlength="4" inputmode="numeric">
								</div>
							</div>
						</div>
					</fieldset>
				</div>
			</div>

			<div class="govuk-radios__item">
				<input class="govuk-radios__input" data-aria-controls="conditional-monitoring-no" id="monitoring-no" name="monitoring" type="radio" value="no">
				<label class="govuk-label govuk-radios__label" for="monitoring-no">
					No
				</label>
			</div>

		</div>
	</fieldset>
</div>

<script type="application/javascript" nonce="@nonce">
	$(function () {
		// allow only numbers
		$(".govuk-date-input__input").on('input', function () {
			$(this).val($(this).val().replace(/[^0-9]/g, ''));
		});

		// allow 1-31
		$("input[name='dtr-day']").on('input', function () {
			let match = $(this).val().match(/^(([0]?[1-9])|([1-2][0-9])|(3[01]))$/);
			if (match === null) {
				$(this).val('');
			}
		});

		// allow 1-12
		$("input[name='dtr-month']").on('input', function () {
			let match = $(this).val().match(/(^0?[1-9]$)|(^1[0-2]$)/);
			if (match === null) {
				$(this).val('');
			}
		});

		// allow year to be current year or higher
		$("input[name='dtr-year']").focusout(function () {
			let currentYear =  new Date().getFullYear();
			if ($(this).val() < currentYear) {
				$(this).val('');
			}
		});

		function monthDays(year, month) {
			let d= new Date(year, month + 1, 0);
			return d.getDate();
		}

		// is leap year
		function leapYear(year) {
		  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
		}

		let validator = formValidator($("#close-case-form")[0]);
		validator.addValidator('case-outcomes', [{
			method: function(field) {
				return field.value.trim().length > 0;
			},
			message: 'You have not recorded rational for closure'
		},
		{
			method: function(field) {
				return field.value.trim().length <= 200;
			},
			message: 'Your case outcome contains too many characters'
		}]);
		validator.addValidator('monitoring', [{
			method: function(field) {
				if (field.value === 'yes') {

					// Adds validator if doesnt exist
					if(!validator.validators.some(validator => validator.fieldName === "dtr-day")) {

						validator.addValidator('dtr-day', [{
							method: function(field, params) {
								return (params.day.value.length !== 0 && params.month.value.length !== 0 && params.year.value !== 0);
							},
							message: 'Enter date to review',
							params: {
								day: document.getElementById('dtr-day'),
								month: document.getElementById('dtr-month'),
								year: document.getElementById('dtr-year')
							}
						}, {
							method: function(field, params) {
								let reviewAt = new Date(parseInt(params.year.value, 10), parseInt(params.month.value, 10) - 1, parseInt(params.day.value, 10));
								return reviewAt instanceof Date && !isNaN(reviewAt.getDate());
							},
							message: 'Enter a valid date to review',
							params: {
								day: document.getElementById('dtr-day'),
								month: document.getElementById('dtr-month'),
								year: document.getElementById('dtr-year')
							}
						}, {
							method: function(field, params) {
								let year = parseInt(params.year.value, 10);
								let month = parseInt(params.month.value, 10) - 1;
								let day = parseInt(params.day.value, 10);

								let reviewAt = new Date(year, month, day);
								let reviewAtTomorrow = new Date();
								reviewAtTomorrow.setDate(reviewAtTomorrow.getDate() + 1);
								reviewAtTomorrow.setHours(0, 0, 0, 0);

								if (leapYear(year) && month === 1 && day > 29) {
									params.day.value = '';
									return false;
								}
								if (!leapYear(year) && month === 1 && day > 28) {
									params.day.value = '';
									return false;
								}

								if (year !== undefined && month !== undefined) {
									let days = monthDays(year,  month);
									if (day > days) {
										params.day.value = '';
										return false;
									}
								}

								if (reviewAt < reviewAtTomorrow) {
									params.year.value = '';
									return false;
								}

								return reviewAt >= reviewAtTomorrow;
							},
							message: 'Enter a valid date',
							params: {
								day: document.getElementById('dtr-day'),
								month: document.getElementById('dtr-month'),
								year: document.getElementById('dtr-year')
							}
						}]);
					}
				}
				else
				{
					// Remove validator from array
					validator.validators = validator.validators.filter(function(value) {
						return value.fieldName !== "dtr-day";
					});
				}

				return field.value.trim().length > 0;
			},
			message: 'Select monitoring'
		}]);
	});
</script>