@page "/case/{urn:long}/management/action/financialplan/{financialPlanId:long}/closed"
@model ConcernsCaseWork.Pages.Case.Management.Action.FinancialPlan.ClosedPageModel

@using ConcernsCaseWork.Helpers;
@using ConcernsCaseWork.Extensions;
@using ConcernsCaseWork.Enums;
@using Microsoft.AspNetCore.Mvc.TagHelpers

@{
	ViewData["Title"] = "Financial Plan";
}

@section BeforeMain {
	<div class="govuk-width-container">
		<back-link url="@Model.BackLink.Url" label="@Model.BackLink.Label"></back-link>
	</div>
}

<div class="govuk-width-container">
    <partial name="_BannerError" />

    @if (!string.IsNullOrEmpty((string)TempData.Peek("Error.Message")))
    {
        <partial name="_Error" />
    }
    else
    {

        <h1 class="govuk-heading-l">
            <span class="govuk-caption-m">Case ID @RouteData.Values["urn"]</span>
            Financial plan
        </h1>
        <span class="govuk-tag ragtag ragtag__grey govuk-!-margin-bottom-3">Closed</span>

        <div class="govuk-hint" id="financial-plan-hint">
            <a target="_blank" href="https://educationgovuk.sharepoint.com/sites/lveefa00003/SitePages/Trust%20financial%20plans.aspx" class="govuk-link" rel="noreferrer noopener">
                SFSO Knowledge: Financial Plan
            </a>
        </div>

        <table class="govuk-table">
            <caption class="govuk-table__caption govuk-table__caption--m"></caption>
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody class="govuk-table__body">

                @* Date opened *@
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table-case-details__header">Date financial plan opened</th>
                    <td class="govuk-table__cell" data-testid="date-opened">
                        @{
                            RenderValue(DateTimeHelper.ParseToDisplayDate(Model.FinancialPlanModel.CreatedAt));
                        }
                    </td>
                </tr>

                @* Date closed *@
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table-case-details__header">Date financial plan closed</th>
                    <td class="govuk-table__cell" data-testid="date-closed">
                        @{
                            RenderValue(DateTimeHelper.ParseToDisplayDate(Model.FinancialPlanModel.ClosedAt.Value));
                        }
                    </td>
                </tr>

                @* Status *@
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table-case-details__header">Status when closed</th>
                    <td class="govuk-table__cell" data-testid="status-text">
                        @{

                            if (Model.FinancialPlanModel.Status != null)
                            {
                                var statusName = Model.FinancialPlanModel.Status.Name;
                                var statusEnum = (FinancialPlanStatus)@Enum.Parse(typeof(FinancialPlanStatus), statusName);

                                <span>@EnumHelper.GetEnumDescription(statusEnum)</span>
                            }
                            else
                            {
                                RenderEmptyLabel();
                            }
                        }
                    </td>
                </tr>

                @* Date plan requested *@
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table-case-details__header">Date financial plan requested</th>
                    <td class="govuk-table__cell" data-testid="date-plan-requested-text">
                        @{
                            if (Model.FinancialPlanModel.DatePlanRequested.HasValue)
                            {
                                RenderValue(DateTimeHelper.ParseToDisplayDate(Model.FinancialPlanModel.DatePlanRequested));
                            }
                            else
                            {
                                RenderEmptyLabel();
                            }
                        }
                    </td>
                </tr>

                @* Date viable plan received *@
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table-case-details__header">Date viable plan received</th>
                    <td class="govuk-table__cell" data-testid="date-plan-received-text">
                        @{
                            if (Model.FinancialPlanModel.DateViablePlanReceived.HasValue)
                            {
                                RenderValue(DateTimeHelper.ParseToDisplayDate(Model.FinancialPlanModel.DateViablePlanReceived));
                            }
                            else
                            {
                                RenderEmptyLabel();
                            }
                        }
                    </td>
                </tr>

                @* Notes *@
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table-case-details__header">Notes (optional)</th>
                    <td class="govuk-table__cell" data-testid="notes-text">
                        @{
                            if (!string.IsNullOrEmpty(Model.FinancialPlanModel.Notes))
                            {
                                <span class="dfe-text-area-display">@Model.FinancialPlanModel.Notes</span>
                            }
                            else
                            {
                                RenderEmptyLabel();
                            }
                        }
                    </td>
                </tr>
            </tbody>
        </table>
    }
</div>

@functions {
    private void RenderValue<T>(T value)
    {
        if (IsEmpty(value))
        {
            RenderEmptyLabel();
        }
        else
        {
            @value
        }
    }


    private bool IsEmpty<T>(T value)
    {
        if (value is string)
        {
            return string.IsNullOrWhiteSpace(value as string);
        }

        return value == null || value.Equals(default(T));
    }

    private void RenderEmptyLabel()
    {
        <span class="govuk-tag ragtag ragtag__grey">Empty</span>
    }
}