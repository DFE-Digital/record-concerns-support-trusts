@page "/case/{urn:long}/management/action/decision/{decisionId:long}/{handler?}"
@model ConcernsCaseWork.Pages.Case.Management.Action.Decision.IndexPageModel

@using Microsoft.AspNetCore.Mvc.TagHelpers

@{

    var isClosed = Model.Decision.ClosedDate != string.Empty;
    var isNotRegionsGroupCase = Model.Division != API.Contracts.Case.Division.RegionsGroup;
}

@section BeforeMain {
    <back-link url="@Model.BackLink.Url" label="@Model.BackLink.Label"></back-link>
}

<partial name="_BannerError" />

@if (!string.IsNullOrEmpty((string)TempData.Peek("Error.Message")))
{
    <partial name="_Error" />
}
else
{
    @if (Model.UserCanDelete)
    {
        <a class="govuk-button govuk-button--warning float__right" href="@Request.Path/delete" aria-label="Delete @Model.Decision.Title" data-testid="delete-decision">Delete decision</a>
    }

    <h1 class="govuk-heading-l" data-testid="decision-heading">
        <span class="govuk-caption-m">Decision ID @Model.Decision.DecisionId</span>
        Decision
    </h1>

    @if (isClosed)
    {
        <span class="govuk-tag ragtag ragtag__grey govuk-!-margin-bottom-3">Closed</span>
    }

    @if (Model.Decision.IsEditable)
    {
        if (Model.Decision.Outcome != null)
        {
            <div class="govuk-hint" data-testid="decision-extra-info">
                Review information before editing, returning back to case or continuing to close decision.
            </div>
        }
        else
        {
            <div class="govuk-hint" data-testid="decision-extra-info">
                Review information before editing, going back to case overview or continuing to record decision outcome.
            </div>
        }
    }

    <table class="govuk-table">
        <caption class="govuk-table__caption govuk-table__caption--m govuk-visually-hidden">
            Decision
        </caption>
        <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="decision-open-label">Date decision opened</th>
                <td class="govuk-table__cell" data-testid="decision-open-text">
                    @{
                        RenderValue(Model.Decision.CreatedDate);
                    }
                </td>
            </tr>

            @if (isClosed)
            {
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="decision-closed-label">Date decision closed</th>
                    <td class="govuk-table__cell" data-testid="decision-closed-text">
                        @{
                            RenderValue(Model.Decision.ClosedDate);
                        }
                    </td>
                </tr>
            }

            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="crm-enquiry-label">Has linked CRM case</th>
                <td class="govuk-table__cell" data-testid="has-crm-case">
                    @{
                        RenderValue(Model.Decision.HasCrmCase);
                    }
                </td>
            </tr>

            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="crm-enquiry-label">CRM enquiry number</th>
                <td class="govuk-table__cell" data-testid="crm-enquiry-text">
                    @{
                        RenderValue(Model.Decision.CrmEnquiryNumber);
                    }
                </td>
            </tr>

            @if (isNotRegionsGroupCase)
            {
                <tr class="govuk-table__row" data-testid="row-retrospective-request">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="retrospective-request-label">Retrospective request?</th>
                    <td class="govuk-table__cell" data-testid="retrospective-request-text">
                        @{
                            RenderValue(Model.Decision.RetrospectiveApproval);
                        }
                    </td>
                </tr>
            }

            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="submission-required-label">Submission required?</th>
                <td class="govuk-table__cell" data-testid="submission-required-text">
                    @{
                        RenderValue(Model.Decision.SubmissionRequired);
                    }
                </td>
            </tr>
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="submission-link-label">Submission link</th>
                <td class="govuk-table__cell" data-testid="submission-link-text">
                    @{
                        RenderValue(Model.Decision.SubmissionLink);
                    }
                </td>
            </tr>

            @if (isNotRegionsGroupCase)
            {
                <tr class="govuk-table__row" data-testid="row-esfa-date-requested">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="date-esfa-received-label">Date ESFA received request</th>
                    <td class="govuk-table__cell" data-testid="date-esfa-received-text">
                        @{
                            RenderValue(Model.Decision.EsfaReceivedRequestDate);
                        }
                    </td>
                </tr>

                <tr class="govuk-table__row" data-testid="row-total-amount-requested">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="amount-requested-label">Total amount requested</th>
                    <td class="govuk-table__cell" data-testid="amount-requested-text">
                        @{
                            RenderValue(Model.Decision.TotalAmountRequested);
                        }
                    </td>
                </tr>
            }
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="decision-type-label">Type of decision</th>
                <td class="govuk-table__cell" data-testid="decision-type-text">
                    @{
                        if (Model.Decision.DecisionTypes.Any())
                        {
                            <ul class="govuk-list govuk-list--bullet">
                                @foreach (var decisionType in Model.Decision.DecisionTypes)
                                {
                                    <li>
                                        @{
                                            RenderValue(decisionType);
                                        }
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            RenderEmptyLabel();
                        }
                    }
                </td>
            </tr>

            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="supporting-notes-label">Supporting notes (optional)</th>
                <td class="govuk-table__cell" data-testid="supporting-notes-text">
                    @{
                        RenderTextAreaValue(Model.Decision.SupportingNotes);
                    }
                </td>
            </tr>
            @if (Model.Decision.IsEditable)
            {
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="edit-decision-label">Action</th>
                    <td class="govuk-table__cell" data-testid="edit-decision-text">
                        @{
                            RenderLink("Edit information", "action", Model.Decision.EditLink);
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    if (Model.Decision.Outcome != null)
    {
        <h1 class="govuk-heading-m" data-testid="decision-outcome-heading">
            Decision outcome
        </h1>

        <table class="govuk-table" data-testid="decision-outcome-table">
            <caption class="govuk-table__caption govuk-table__caption--m govuk-visually-hidden">
                Decision outcome
            </caption>
            <tbody class="govuk-table__body">
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="business-areas-consulted-label">Business areas consulted</th>
                    <td class="govuk-table__cell" data-testid="business-areas-consulted-text">
                        @{
                            if (Model.Decision.Outcome.BusinessAreasConsulted.Any())
                            {
                                <ul class="govuk-list">
                                    @foreach (var businessArea in Model.Decision.Outcome.BusinessAreasConsulted)
                                    {
                                        <li>
                                            @{
                                                RenderValue(businessArea);
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                RenderEmptyLabel();
                            }
                        }
                    </td>
                </tr>

                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="decision-status-label">Decision outcome</th>
                    <td class="govuk-table__cell" data-testid="decision-status-text">
                        @{
                            RenderValue(Model.Decision.Outcome.Status);
                        }
                    </td>
                </tr>
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="decision-made-date-label">Date decision made</th>
                    <td class="govuk-table__cell" data-testid="decision-made-date-text">
                        @{
                            RenderValue(Model.Decision.Outcome.DecisionMadeDate);
                        }
                    </td>
                </tr>
                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="decision-effective-date-label">Date decision effective</th>
                    <td class="govuk-table__cell" data-testid="decision-date-effective-text">
                        @{
                            RenderValue(Model.Decision.Outcome.DecisionEffectiveFromDate);
                        }
                    </td>
                </tr>

                @if (isNotRegionsGroupCase)
                {
                    <tr class="govuk-table__row" data-testid="row-total-amount-approved">
                        <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="total-amount-approved-label">Total amount approved</th>
                        <td class="govuk-table__cell" data-testid="total-amount-approved-text">
                            @{
                                RenderValue(Model.Decision.Outcome.TotalAmount);
                            }
                        </td>
                    </tr>
                }

                <tr class="govuk-table__row">
                    <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="authorised-by-label">Decision authorised by</th>
                    <td class="govuk-table__cell" data-testid="authoriser-text">
                        @{
                            RenderValue(Model.Decision.Outcome.Authorizer);
                        }
                    </td>
                </tr>

                @if (Model.Decision.IsEditable)
                {
                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header govuk-table__header__width_15" data-testid="edit-decision-outcome-label">Action</th>
                        <td class="govuk-table__cell" data-testid="edit-decision-outcome-text">
                            @{
                                RenderLink("Edit information", "action", Model.Decision.Outcome.EditLink);
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (Model.Decision.IsEditable)
    {
        if (Model.Decision.Outcome == null)
        {
            <div class="govuk-button-group">
                <a data-prevent-double-click="true"
                   class="govuk-button govuk-!-margin-top-6"
                   data-module="govuk-button"
                   role="button"
                   data-testid="continue-record-decision-button"
                   href="@Request.Path/outcome/addOrUpdate">
                    Continue to record decision outcome
                </a>
            </div>
        }
        else
        {
            <div class="govuk-button-group">
                <a data-prevent-double-click="true"
                   class="govuk-button govuk-!-margin-top-6"
                   data-module="govuk-button"
                   role="button"
                   data-testid="close-decision-button"
                   href="@Request.Path/close">
                    Continue to close decision
                </a>
            </div>
        }
    }
}

@functions {
    private void RenderValue<T>(T value)
    {
        if (IsEmpty(value))
        {
            RenderEmptyLabel();
        }
        else
        {
            @value
        }
    }

    private void RenderTextAreaValue<T>(T value)
    {
        if (IsEmpty(value))
        {
            RenderEmptyLabel();
        }
        else
        {
            <span class="dfe-text-area-display">@value</span>
        }
    }

    private void RenderLink(string value, string fieldName, string url)
    {
        <a class="govuk-link" href="@url">
            @value
            <span class="govuk-visually-hidden" data-testid=testid>@fieldName</span>
        </a>
    }

    private bool IsEmpty<T>(T value)
    {
        if (value is string)
        {
            return string.IsNullOrWhiteSpace(value as string);
        }

        return value == null || value.Equals(default(T));
    }

    private void RenderEmptyLabel()
    {
        <span class="govuk-tag ragtag ragtag__grey">Empty</span>
    }
}