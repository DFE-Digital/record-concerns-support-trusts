@page "/case/{handler?}"
@model ConcernsCaseWork.Pages.Case.IndexPageModel

@{
	ViewData["Title"] = "New Case";
	ViewData["BackButtonLink"] = "/";
	var nonce = HttpContext.GetNonce();
}

<div class="govuk-width-container">
	<partial name="_BannerError"/>
	
	<div class="moj-search govuk-grid-row">
		<div class="govuk-grid-column-two-thirds">
			<h1 class="govuk-heading-m">Create case</h1>
			<partial name="_FindTrust" />
		</div>
	</div>

</div>

<script type="application/javascript" nonce="@nonce">
	$(function () {
		let clearResults = function () {
			$("#trusts-partial-results").empty();
			$("#autocomplete-container").empty();
			$(".autocomplete__menu").addClass("autocomplete__menu--hidden");
		};

		$("#search").focusin(function() {
			this.value = "";
			clearResults();
		});

		try {
			let searchForm = $("#search-form");
			const validator = formValidator(searchForm[0]);
			validator.addValidator('search', [{
				method: function(field) {
					return field.value.trim().length > 0;
				},
				message: 'Search cannot be blank'
			}, {
				method: function(field) {
					return (field.value.length > 2);
				},
				message: 'Enter search criteria higher than three characters'
			}]);

			searchForm.submit(function (event) {
				validator.onSubmit(event);
				if (validator.validate()) {
					event.preventDefault();

					clearResults();
					showLoader();

					// Ajax Get Trusts
					let searchQuery = $("#search").val();
					$.get("case/TrustsSearchResult", { searchQuery: searchQuery })
					.done(function (trusts) {
						hideGlobalError();
						hideLoader();

						if (trusts.length === 0) {
							$(".autocomplete__menu").removeClass("autocomplete__menu--hidden");
						}
						else {
							let autocompleteContainer = document.getElementById("autocomplete-container");

							const trustNames = trusts.map(trust => trust.displayName);
							const input = $("#search");

							accessibleAutocomplete({
							  element: autocompleteContainer,
							  id: input.attr("id"),
							  name: input.attr("name"),
							  source: trustNames,
							  confirmOnBlur: false,
							  minLength: 3,
							  onConfirm: (selected) => {
									let selectedTrust = trusts.find(item => item.displayName === selected);
									let trustUkprn = selectedTrust.ukPrn;
									let trustName = selectedTrust.groupName;
									input.attr("aria-valuetext", trustUkprn);
									input.val(selected);

									// Ajax Post Trust
									$.get("case?handler=SelectedTrust",
										{ trustUkPrn: trustUkprn, trustName: trustName })
									.done(function (result) {
										window.location.replace(result.redirectUrl);
									})
									.fail(function() {
										showGlobalError();
									});
								}
							});

							$(".autocomplete__wrapper #search").hide("fast");
							let autocompleteSearch = $("#autocomplete-container #search");
							autocompleteSearch.val(searchQuery);
						}

					}).fail(function() {
						clearResults();
						showGlobalError();
						hideLoader();
					});
				} else {
					clearResults();
					hideGlobalError()
					hideLoader();
				}
			});

		} catch(err) {
			clearResults();
			showGlobalError();
			hideLoader();
		}
	});
</script>

