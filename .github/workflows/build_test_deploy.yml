name: Build, Test and Deploy to Dev

on:
  push:
    branches: [ main ]
    
env:
  REGISTRY: ghcr.io
  DOCKER_IMAGE: dfe-digital/amsd-casework
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    environment: dev
    
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis:alpine
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore ConcernsCaseWork/ConcernsCaseWork.sln
      - name: Build
        run: dotnet build ConcernsCaseWork/ConcernsCaseWork.sln --no-restore
      - name: Set User secrets
        run: |
          cd ConcernsCaseWork/ConcernsCaseWork
          dotnet user-secrets set "VCAP_SERVICES" "${{ secrets.VCAP_SERVICES }}"
          dotnet user-secrets set "trams:api_endpoint" "${{ secrets.TRAMS_API_ENDPOINT }}"
          dotnet user-secrets set "trams:api_key" "${{ secrets.TRAMS_API_KEY }}"
          dotnet user-secrets set "app:username" "${{ secrets.APP_USERNAME }}"
          dotnet user-secrets set "app:password" "${{ secrets.APP_PASSWORD }}"
          dotnet user-secrets set "app:password" "${{ secrets.APP_PASSWORD }}"
          dotnet user-secrets set "AzureAd:ClientSecret" "${{ secrets.AZURE_AD_CLIENT_SECRET }}"
      - name: Test
        run: dotnet test ConcernsCaseWork/ConcernsCaseWork.sln --no-build --verbosity diagnostic
  
  build-and-push-image:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          GIT_REF=${{ github.ref }}
          GIT_BRANCH=${GIT_REF##*/}
          echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Build Frontend
        run: make build-frontend

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE}}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
          push: true
          cache-from: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE}}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE}}:main
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ env.DOCKER_IMAGE_TAG }}
        
  deploy-image:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: terraform
    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2

      # Provides AWS credentials to Terraform
      # By default, Terraform checks the home directory for a .aws folder with a credential file
      # Documentation: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/create-shared-credentials-file.html
      - name: "Setup - Build AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
      
      - name: Set environment variables
        run: |
          echo "DOCKER_IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV
          
      # Downloads a specific version of Terraform CLI and adds it to PATH
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3

      - name: Set environment variables for environments
        run: |
          BACKEND_CONFIG='-backend-config="key=dev/app.tfstate" -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}"'
          PARAMETER_STORE_ENVIRONMENT=dev
          VAR_FILE=dev.tfvars
          echo "BACKEND_CONFIG=${BACKEND_CONFIG}" >> $GITHUB_ENV
          echo "PARAMETER_STORE_ENVIRONMENT=${PARAMETER_STORE_ENVIRONMENT}" >> $GITHUB_ENV
          echo "VAR_FILE=${VAR_FILE}" >> $GITHUB_ENV
          
      # Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform Init"
        run: terraform init -input=false ${{ env.BACKEND_CONFIG }}
        env:
          TF_VAR_cf_user: ${{ secrets.CF_USER }}
          TF_VAR_cf_password: ${{ secrets.CF_PASSWORD }}

      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
      - name: "Run - Terraform Apply"
        run: terraform apply -input=false -auto-approve -var-file=${{env.VAR_FILE}}
        env:
          TF_VAR_cf_user: ${{ secrets.CF_USER }}
          TF_VAR_cf_password: ${{ secrets.CF_PASSWORD }}
          TF_VAR_cf_api_url: ${{ secrets.CF_API_URL }}
          TF_VAR_cf_app_image_tag: ${{ env.DOCKER_IMAGE_TAG }}
          TF_VAR_app_trams_api_endpoint: ${{ secrets.TRAMS_API_ENDPOINT }}
          TF_VAR_app_trams_api_key: ${{ secrets.TRAMS_API_KEY }}
          TF_VAR_app_username: ${{ secrets.APP_USERNAME }}
          TF_VAR_app_password: ${{ secrets.APP_PASSWORD }}
          TF_VAR_logit_sink_url: ${{ secrets.LOGIT_SINK_URL }}
          TF_VAR_azure_ad_client_secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}

  cypress-tests:
    needs: deploy-image
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ConcernsCaseWork/ConcernsCaseWork.CypressTests
    steps:
      - uses: actions/checkout@v2
      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Npm install
        run: npm install
      - name: Run cypress
        run: npm run cy:run -- --env username='${{ secrets.USERNAME }},password=${{ secrets.PASSWORD }},url=${{ secrets.ENDPOINT }},api=${{ secrets.TRAMS_API_ENDPOINT }},apiKey=${{ secrets.TRAMS_API_KEY }}'
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
           name: screenshots
           path: ConcernsCaseWork/ConcernsCaseWork.CypressTests/cypress/screenshots
      - name: Upload test report
        if: always()
        run: npm run generate:html:report
      - uses: actions/upload-artifact@v1
        with:
          name: reports
          path: ConcernsCaseWork/ConcernsCaseWork.CypressTests/mochareports
