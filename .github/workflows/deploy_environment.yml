name: "Deploy to environment"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (staging, production)"
        required: true
      github_sha:
        description: "Deploy specific version"
        required: false

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis:alpine
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore ConcernsCaseWork/ConcernsCaseWork.sln
      - name: Build
        run: dotnet build ConcernsCaseWork/ConcernsCaseWork.sln --no-restore
      - name: Set User secrets
        run: |
          cd ConcernsCaseWork/ConcernsCaseWork
          dotnet user-secrets set "VCAP_SERVICES" "${{ secrets.VCAP_SERVICES }}"
          dotnet user-secrets set "trams:api_endpoint" "${{ secrets.TRAMS_API_ENDPOINT }}"
          dotnet user-secrets set "trams:api_key" "${{ secrets.TRAMS_API_KEY }}"
          dotnet user-secrets set "app:username" "${{ secrets.APP_USERNAME }}"
          dotnet user-secrets set "app:password" "${{ secrets.APP_PASSWORD }}"
      - name: Test staging
        if: github.event.inputs.environment == 'staging'
        run: dotnet test ConcernsCaseWork/ConcernsCaseWork.sln --no-build --verbosity diagnostic
      - name: Test production
        if: github.event.inputs.environment == 'production'
        run: dotnet test ConcernsCaseWork/ConcernsCaseWork.sln --filter TestCategory=Smoke --no-build --verbosity diagnostic
  
  terraform-run:
    needs: build-test
    name: "Terraform Run"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: terraform
    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2

      # Provides AWS credentials to Terraform
      # By default, Terraform checks the home directory for a .aws folder with a credential file
      # Documentation: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/create-shared-credentials-file.html
      - name: "Setup - Build AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Set docker image from input
        if: github.event.inputs.github_sha != ''
        run: |
          echo "DOCKER_IMAGE_TAG=${{ github.event.inputs.github_sha }}" >> $GITHUB_ENV

      - name: Set docker image from github sha
        if: github.event.inputs.github_sha == ''
        run: |
          echo "DOCKER_IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV

      # Downloads a specific version of Terraform CLI and adds it to PATH
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3

      - name: Set environment variables for environments
        run: |
          BACKEND_CONFIG='-backend-config="key=${{ github.event.inputs.environment }}/app.tfstate" -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}"'
          PARAMETER_STORE_ENVIRONMENT=${{ github.event.inputs.environment }}
          VAR_FILE=${{ github.event.inputs.environment }}.tfvars
          echo "BACKEND_CONFIG=${BACKEND_CONFIG}" >> $GITHUB_ENV
          echo "PARAMETER_STORE_ENVIRONMENT=${PARAMETER_STORE_ENVIRONMENT}" >> $GITHUB_ENV
          echo "VAR_FILE=${VAR_FILE}" >> $GITHUB_ENV

      # Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform Init"
        run: terraform init -input=false ${{ env.BACKEND_CONFIG }}
        env:
          TF_VAR_cf_user: ${{ secrets.CF_USER }}
          TF_VAR_cf_password: ${{ secrets.CF_PASSWORD }}

      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
      - name: "Run - Terraform Apply"
        id: plan
        run: terraform apply -input=false -auto-approve -var-file=${{env.VAR_FILE}}
        env:
          TF_VAR_cf_user: ${{ secrets.CF_USER }}
          TF_VAR_cf_password: ${{ secrets.CF_PASSWORD }}
          TF_VAR_cf_api_url: ${{ secrets.CF_API_URL }}
          TF_VAR_cf_app_image_tag: ${{ env.DOCKER_IMAGE_TAG }}
          TF_VAR_app_environment: ${{ github.event.inputs.environment }}
          TF_VAR_app_trams_api_endpoint: ${{ secrets.TRAMS_API_ENDPOINT }}
          TF_VAR_app_trams_api_key: ${{ secrets.TRAMS_API_KEY }}
          TF_VAR_app_username: ${{ secrets.APP_USERNAME }}
          TF_VAR_app_password: ${{ secrets.APP_PASSWORD }}
          TF_VAR_logit_sink_url: ${{ secrets.LOGIT_SINK_URL }}
          TF_VAR_azure_ad_client_secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}