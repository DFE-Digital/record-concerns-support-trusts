name: Build and Test

on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
 
jobs:
  build-test:
    runs-on: ubuntu-latest
    environment: dev
    env:
      # Note: The database name may be overridden by the tests
      CONNECTION_STRING: 'Server=localhost,1433;Database=integrationtests;User Id=sa;Password=P1swrd!$;TrustServerCertificate=True'
      CONNECTION_STRING_KEY: 'ConnectionStrings:DefaultConnection'

    services:
      sql-server:
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
        - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: P1swrd!$

      redis:
        image: redis:alpine
        ports:
        - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones disabled for a better relevancy of SC analysis
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarCloud scanners
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Install dotnet reportgenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Restore dependencies
        run: dotnet restore ConcernsCaseWork/ConcernsCaseWork.sln

      - name: Build solution, test and run SonarCloud scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin /k:"DFE-Digital_amsd-casework" /o:"dfe-digital" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverageReportPaths=CoverageReport/SonarQube.xml
          dotnet build ConcernsCaseWork/ConcernsCaseWork.sln --no-restore
          dotnet test ConcernsCaseWork/ConcernsCaseWork.sln --no-build --verbosity normal --collect:"XPlat Code Coverage" --environment "${{env.CONNECTION_STRING_KEY}}"="${{env.CONNECTION_STRING}}" --filter "FullyQualifiedName!~ConcernsCaseWork.Integration.Tests"
          reportgenerator -reports:./**/coverage.cobertura.xml -targetdir:./ConcernsCaseWork/CoverageReport -reporttypes:SonarQube
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"